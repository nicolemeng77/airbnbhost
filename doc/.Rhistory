mutate(bedrooms = ifelse(is.na(bedrooms), 0, bedrooms)) %>%
mutate(beds = ifelse(is.na(beds), 0, beds)) %>%
mutate(number_of_reviews = ifelse(is.na(number_of_reviews), 0, number_of_reviews)) %>%
mutate(host_response_time = ifelse(is.na(host_response_time), 'no_record', host_response_time)) %>%
mutate(cleaning_fee = ifelse(is.na(cleaning_fee), 0, cleaning_fee)) %>%
mutate(security_deposit = ifelse(is.na(security_deposit), 0, security_deposit)) %>%
mutate(host_listings_count = ifelse(is.na(host_listings_count), 0, host_listings_count)) %>%
mutate(host_identity_verified = ifelse(is.na(host_identity_verified), 0, host_identity_verified)) %>%
mutate(hosted_years = ifelse(is.na(hosted_years), 0, hosted_years))
#combine property_type ( factors)
data <- data.table(data)
data <- data[property_type %in% c("Barn", "Bed and breakfast", "Boat", "Bungalow","Bus","Cabin","Camper/RV","Casa particular (Cuba)", "Castle","Cave","Cottage","Dome house","Earth house","Farm stay","Houseboat","Island","Nature lodge","Other","Tent","Timeshare","Tiny house","Yurt"), property_type:= "Others"]
data <- data[property_type %in% c("Townhouse", "House", "Guesthouse", "Resort","Villa","Tiny house"), property_type:= "House"]
data <- data[property_type %in% c("Apartment","Condominium","Guest suite","Serviced apartment"), property_type:= "Apartment"]
data <- data[property_type %in% c("Hostel","Hotel","Boutique hotel","Aparthotel"), property_type:= "Hotel"]
data <- data[grepl("loft", data$name), property_type := "Loft"]
data$have_shampoo
load("../data/orig_data.RData")
library(tidyverse)
library(MASS)
library(scales)
library(data.table)
library(rsample)
library(randomForest)
library(glmnet)
library(ranger)
library(gbm)
library(xgboost)
library(caret)
library(lime)
library(vtreat)
library(modelr)
library(broom)
library(tidyr)
library(tidymodels)
library(ggpubr)
#ignore useless variables
data <- orig_data %>% dplyr::select(id,name,description, transit, house_rules, host_since, host_is_superhost,
host_listings_count, host_identity_verified, neighbourhood_cleansed, square_feet,
neighbourhood_group_cleansed, zipcode, latitude, longitude, property_type,
room_type, accommodates, bathrooms, bedrooms, beds,bed_type, amenities, price,
weekly_price, cleaning_fee, minimum_nights, availability_365,
number_of_reviews, instant_bookable, cancellation_policy,
require_guest_phone_verification,
host_response_time, host_verifications, security_deposit)
#rename variable
data <- data %>%
rename(neighbourhood = neighbourhood_cleansed,
neighbourhood_group = neighbourhood_group_cleansed)
#add new var
data <- data %>%
mutate(number_of_amenities = lengths(amenities)) %>%
mutate(number_of_verifications = lengths(host_verifications)) %>%
mutate(transit_level = as.numeric(is.na(transit))) %>%  #1:has description, 0:NA
#amenity
mutate(rule_Pets = ifelse(grepl("no pets", data$house_rules), 0, 1)) %>%
mutate(have_pet = ifelse(grepl("cat", data$amenities) |
grepl("dog", data$amenities) |
grepl("pet", data$amenities), 1, 0)) %>%
mutate(have_shampoo = ifelse(grepl("shampoo", data$amenities), 1, 0)) %>%
mutate(have_gym = ifelse(grepl("gym", data$amenities), 1, 0)) %>%
mutate(have_washer = ifelse(grepl("washer", data$amenities), 1, 0)) %>%
mutate(have_kitchen = ifelse(grepl("kitchen", data$amenities), 1, 0)) %>%
mutate(have_parking = ifelse(grepl("parking", data$amenities), 1, 0)) %>%
mutate(have_elevator = ifelse(grepl("elevator", data$amenities), 1, 0)) %>%
mutate(have_laptop_workspac = ifelse(grepl("Laptop friendly workspace", data$amenities), 1, 0)) %>%
mutate(hosted_years = round(as.double(difftime(Sys.Date(), host_since)) / 365, 1))
#Data Structure
convert_price <- function(x) as.numeric(gsub("\\$|,", "", x))
string_split <- function(x) str_split(gsub("\\{|\\}|\"", "", x),",")
#delete sign, to lower letter
data <- data %>%
mutate_at(c("price", "weekly_price", "cleaning_fee", "security_deposit"), convert_price) %>%
mutate_at("amenities", string_split) %>%
mutate_at('host_verifications', string_split) %>%
mutate(amenities = tolower(amenities)) %>%
mutate(house_rules = tolower(house_rules)) %>%
mutate(name = tolower(name))
#change logical to numeric, as.factor
data <- data %>%
mutate_if(is.logical, as.numeric) %>% # convert True False to 1,0
mutate_at(c("neighbourhood", "neighbourhood_group", "property_type",
"room_type", "bed_type", "cancellation_policy", 'host_is_superhost',
'host_identity_verified', 'instant_bookable', 'require_guest_phone_verification',
'host_response_time'),
as.factor)
#fill NA (to 0 in most cases)
data <- data %>%
mutate(host_is_superhost = ifelse(is.na(host_is_superhost), 0, host_is_superhost)) %>%
mutate(bathrooms = ifelse(is.na(bathrooms), 0, bathrooms)) %>%
mutate(bedrooms = ifelse(is.na(bedrooms), 0, bedrooms)) %>%
mutate(beds = ifelse(is.na(beds), 0, beds)) %>%
mutate(number_of_reviews = ifelse(is.na(number_of_reviews), 0, number_of_reviews)) %>%
mutate(host_response_time = ifelse(is.na(host_response_time), 'no_record', host_response_time)) %>%
mutate(cleaning_fee = ifelse(is.na(cleaning_fee), 0, cleaning_fee)) %>%
mutate(security_deposit = ifelse(is.na(security_deposit), 0, security_deposit)) %>%
mutate(host_listings_count = ifelse(is.na(host_listings_count), 0, host_listings_count)) %>%
mutate(host_identity_verified = ifelse(is.na(host_identity_verified), 0, host_identity_verified)) %>%
mutate(hosted_years = ifelse(is.na(hosted_years), 0, hosted_years))
#combine property_type ( factors)
data <- data.table(data)
data <- data[property_type %in% c("Barn", "Bed and breakfast", "Boat", "Bungalow","Bus","Cabin","Camper/RV","Casa particular (Cuba)", "Castle","Cave","Cottage","Dome house","Earth house","Farm stay","Houseboat","Island","Nature lodge","Other","Tent","Timeshare","Tiny house","Yurt"), property_type:= "Others"]
data <- data[property_type %in% c("Townhouse", "House", "Guesthouse", "Resort","Villa","Tiny house"), property_type:= "House"]
data <- data[property_type %in% c("Apartment","Condominium","Guest suite","Serviced apartment"), property_type:= "Apartment"]
data <- data[property_type %in% c("Hostel","Hotel","Boutique hotel","Aparthotel"), property_type:= "Hotel"]
data <- data[grepl("loft", data$name), property_type := "Loft"]
data、
data$have_shampoo
load("../data/orig_data.RData")
library(tidyverse)
library(MASS)
library(scales)
library(data.table)
library(rsample)
library(randomForest)
library(glmnet)
library(ranger)
library(gbm)
library(xgboost)
library(caret)
library(lime)
library(vtreat)
library(modelr)
library(broom)
library(tidyr)
library(tidymodels)
library(ggpubr)
#ignore useless variables
data <- orig_data %>% dplyr::select(id,name,description, transit, house_rules, host_since, host_is_superhost,
host_listings_count, host_identity_verified, neighbourhood_cleansed, square_feet,
neighbourhood_group_cleansed, zipcode, latitude, longitude, property_type,
room_type, accommodates, bathrooms, bedrooms, beds,bed_type, amenities, price,
weekly_price, cleaning_fee, minimum_nights, availability_365,
number_of_reviews, instant_bookable, cancellation_policy,
require_guest_phone_verification,
host_response_time, host_verifications, security_deposit)
#rename variable
data <- data %>%
rename(neighbourhood = neighbourhood_cleansed,
neighbourhood_group = neighbourhood_group_cleansed)
#to lower letter, delete sign,
data <- data %>%
mutate(amenities = tolower(amenities)) %>%
mutate(house_rules = tolower(house_rules)) %>%
mutate(name = tolower(name))
convert_price <- function(x) as.numeric(gsub("\\$|,", "", x))
string_split <- function(x) stringr::str_split(gsub("\\{|\\}|\"", "", x),",")
data <- data %>%
mutate_at(c("price", "weekly_price", "cleaning_fee", "security_deposit"), convert_price) %>%
mutate_at("amenities", string_split) %>%
mutate_at('host_verifications', string_split)
#add new var
data <- data %>%
mutate(hosted_years = round(as.double(difftime(Sys.Date(), host_since)) / 365, 1)) %>%
mutate(number_of_amenities = lengths(amenities)) %>%
mutate(number_of_verifications = lengths(host_verifications)) %>%
mutate(transit_level = as.numeric(is.na(transit))) %>%  #1:has description, 0:NA
#amenity
mutate(rule_pets = ifelse(grepl("no pets", data$house_rules), 0, 1)) %>%
mutate(have_pet = ifelse(grepl("cat", data$amenities) |
grepl("dog", data$amenities) |
grepl("pet", data$amenities), 1, 0)) %>%
mutate(have_shampoo = ifelse(grepl("shampoo", data$amenities), 1, 0)) %>%
mutate(have_gym = ifelse(grepl("gym", data$amenities), 1, 0)) %>%
mutate(have_washer = ifelse(grepl("washer", data$amenities), 1, 0)) %>%
mutate(have_kitchen = ifelse(grepl("kitchen", data$amenities), 1, 0)) %>%
mutate(have_parking = ifelse(grepl("parking", data$amenities), 1, 0)) %>%
mutate(have_elevator = ifelse(grepl("elevator", data$amenities), 1, 0)) %>%
mutate(have_laptop_workspac = ifelse(grepl("laptop friendly workspace", data$amenities), 1, 0))
#fill NA (to 0 in most cases)
data <- data %>%
mutate(host_is_superhost = ifelse(is.na(host_is_superhost), 0, host_is_superhost)) %>%
mutate(bathrooms = ifelse(is.na(bathrooms), 0, bathrooms)) %>%
mutate(bedrooms = ifelse(is.na(bedrooms), 0, bedrooms)) %>%
mutate(beds = ifelse(is.na(beds), 0, beds)) %>%
mutate(number_of_reviews = ifelse(is.na(number_of_reviews), 0, number_of_reviews)) %>%
mutate(host_response_time = ifelse(is.na(host_response_time), 'no_record', host_response_time)) %>%
mutate(cleaning_fee = ifelse(is.na(cleaning_fee), 0, cleaning_fee)) %>%
mutate(security_deposit = ifelse(is.na(security_deposit), 0, security_deposit)) %>%
mutate(host_listings_count = ifelse(is.na(host_listings_count), 0, host_listings_count)) %>%
mutate(host_identity_verified = ifelse(is.na(host_identity_verified), 0, host_identity_verified)) %>%
mutate(hosted_years = ifelse(is.na(hosted_years), 0, hosted_years))
#change logical to numeric, as.factor
data <- data %>%
mutate_if(is.logical, as.numeric) %>% # convert True False to 1,0
mutate_at(c("neighbourhood", "neighbourhood_group", "property_type",
"room_type", "bed_type", "cancellation_policy", 'host_is_superhost',
'host_identity_verified', 'instant_bookable', 'require_guest_phone_verification',
'host_response_time', 'transit_level', 'rule_pets', 'have_pet', 'have_shampoo',
'have_gym', 'have_washer', 'have_kitchen', 'have_parking', 'have_elevator',
'have_laptop_workspac'),
as.factor)
#combine property_type ( factors)
data <- data.table(data)
data <- data[property_type %in% c("Barn", "Bed and breakfast", "Boat", "Bungalow","Bus","Cabin","Camper/RV","Casa particular (Cuba)", "Castle","Cave","Cottage","Dome house","Earth house","Farm stay","Houseboat","Island","Nature lodge","Other","Tent","Timeshare","Tiny house","Yurt"), property_type:= "Others"]
data <- data[property_type %in% c("Townhouse", "House", "Guesthouse", "Resort","Villa","Tiny house"), property_type:= "House"]
data <- data[property_type %in% c("Apartment","Condominium","Guest suite","Serviced apartment"), property_type:= "Apartment"]
data <- data[property_type %in% c("Hostel","Hotel","Boutique hotel","Aparthotel"), property_type:= "Hotel"]
data <- data[grepl("loft", data$name), property_type := "Loft"]
data$have_shampoo
#Distribution of Price
pprice <- ggplot(aes(price), data = data) +labs(  title = "Histogram of price", xlab = "Price") +
geom_histogram(alpha=0.8, aes(y=..density..), fill="lightblue", col="white") +
geom_density( col = "red") +
theme_minimal()
#Distribution of logPrice
plogprice <- ggplot(aes(log(price)), data = data) +labs(  title = "Histogram of log price", xlab = "Price") +
geom_histogram(alpha=0.8, aes(y=..density..), fill="lightblue", col="white") +
geom_density( col = "red") +
theme_minimal()
ggarrange(pprice,plogprice,
labels = c("1.A", "1.B"),
ncol = 2, nrow = 1)
#deal with unusual cases
data1 <- data  %>%
filter(price > 0,
cleaning_fee < 200 | price > 100 | minimum_nights > 10,
price < 2000 | bathrooms > 1 | accommodates > 8,
minimum_nights <= 90)
#nrow(data1)  #47929
#last version
# data <- data  %>%
#   filter(beds <= 20, bedrooms <= 20,
#          bedrooms != 1 | bathrooms <= 4,
#          price < 1500 & price > 0,
#          cleaning_fee <= 200 | minimum_nights >= 30,
#          minimum_nights <= 90) %>%
#   filter(property_type != "Others") #havn't decided
data <- data %>% mutate(log_price = log(price))
p1 <- data %>%
ggplot(aes(x = log_price, color = neighbourhood_group, fill = neighbourhood_group))+
geom_density(alpha = 0.4)+
theme_minimal()
p2 <- data %>%
ggplot(aes(x = reorder(neighbourhood_group, -log_price),
y = log_price, fill = neighbourhood_group))+
geom_boxplot(outlier.size = 0.5,alpha = 0.5)+
ggtitle("Log Price for 5 boroughs")+
xlab("")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.4))
# p3 <- data %>%
#   ggplot(aes(x = reorder(room_type, -log_price),
#              y = log_price, fill = room_type))+
#   geom_boxplot(outlier.size = 0.5,alpha = 0.5)+
#   ggtitle("Figure 3. Log Price for room types")+
#   xlab("")+
#   theme_minimal()+
#   theme(legend.position = "none", plot.title = element_text(hjust = 0.4))
#
ggarrange(p1,p2,
labels = c("Figure2.A", "Figure2.B"),
ncol = 1, nrow = 2)
pairwise.wilcox.test(data$price, data$neighbourhood_group)
#pairwise.wilcox.test(data$price, data$room_type)
#pairwise.wilcox.test(data$price, data$cancellation_policy)
p1 <- data %>%
ggplot(aes(x = log_price, color = have_shampoo, fill = have_shampoo))+
geom_density(alpha = 0.4)+
theme_minimal()
p2 <- data %>%
ggplot(aes(x = reorder(neighbourhood_group, -log_price),
y = log_price, fill = have_shampoo))+
geom_boxplot(outlier.size = 0.5)+
xlab("")+
theme_minimal()
ggarrange(p1,p2,
labels = c("Figure3.A", "Figure3.B"),
ncol = 1, nrow = 2)
have_shampoo <- data %>% filter(have_shampoo == 1) %>% pull(log_price)
not_shampoo <- data %>% filter(have_shampoo == 0) %>% pull(log_price)
var.test(have_shampoo, not_shampoo)
t.test(have_shampoo, not_shampoo, var.equal = F, alternative = "greater")
#Equal Variance
t.test(have_shampoo, not_shampoo, var.equal = F, alternative = "greater")
t.test(have_shampoo, not_shampoo, var.equal = FALSE, alternative = "greater")
have_shampoo <- data %>% filter(have_shampoo == 1) %>% pull(log_price)
not_shampoo <- data %>% filter(have_shampoo == 0) %>% pull(log_price)
var.test(have_shampoo, not_shampoo)
#Equal Variance
t.test(have_shampoo, not_shampoo, var.equal = FALSE, alternative = "greater")
have_shampoo <- data %>% filter(have_shampoo == 1) %>% pull(log_price)
not_shampoo <- data %>% filter(have_shampoo == 0) %>% pull(log_price)
var.test(have_shampoo, not_shampoo)
pairwise.wilcox.test(data$price, data$neighbourhood_group)
#pairwise.wilcox.test(data$price, data$room_type)
#pairwise.wilcox.test(data$price, data$cancellation_policy)
have_shampoo <- data %>% filter(have_shampoo == 1) %>% pull(log_price)
not_shampoo <- data %>% filter(have_shampoo == 0) %>% pull(log_price)
var.test(have_shampoo, not_shampoo)
?t.test
t.test(have_shampoo, not_shampoo, alternative = "greater")
summary(aov(log_price ~ neighbourhood_group * have_shampoo, data = data))
#load("../data/orig_data.RData")
load("../data/cleaned_data.RData")
#load("../data/orig_data.RData")
load("../data/cleaned_data.RData")
#Distribution of Price
pprice <- ggplot(aes(price), data = data) +labs(  title = "Histogram of price", xlab = "Price") +
geom_histogram(alpha=0.8, aes(y=..density..), fill="lightblue", col="white") +
geom_density( col = "red") +
theme_minimal()
#Distribution of logPrice
plogprice <- ggplot(aes(log(price)), data = data) +labs(  title = "Histogram of log price", xlab = "Price") +
geom_histogram(alpha=0.8, aes(y=..density..), fill="lightblue", col="white") +
geom_density( col = "red") +
theme_minimal()
ggarrange(pprice,plogprice,
labels = c("1.A", "1.B"),
ncol = 2, nrow = 1)
#deal with unusual cases
data1 <- data  %>%
filter(price > 0,
cleaning_fee < 200 | price > 100 | minimum_nights > 10,
price < 2000 | bathrooms > 1 | accommodates > 8,
minimum_nights <= 90)
#nrow(data1)  #47929
#last version
# data <- data  %>%
#   filter(beds <= 20, bedrooms <= 20,
#          bedrooms != 1 | bathrooms <= 4,
#          price < 1500 & price > 0,
#          cleaning_fee <= 200 | minimum_nights >= 30,
#          minimum_nights <= 90) %>%
#   filter(property_type != "Others") #havn't decided
data <- data %>% mutate(log_price = log(price))
p1 <- data %>%
ggplot(aes(x = log_price, color = neighbourhood_group, fill = neighbourhood_group))+
geom_density(alpha = 0.4)+
theme_minimal()
p2 <- data %>%
ggplot(aes(x = reorder(neighbourhood_group, -log_price),
y = log_price, fill = neighbourhood_group))+
geom_boxplot(outlier.size = 0.5,alpha = 0.5)+
ggtitle("Log Price for 5 boroughs")+
xlab("")+
theme_minimal()+
theme(legend.position = "none", plot.title = element_text(hjust = 0.4))
# p3 <- data %>%
#   ggplot(aes(x = reorder(room_type, -log_price),
#              y = log_price, fill = room_type))+
#   geom_boxplot(outlier.size = 0.5,alpha = 0.5)+
#   ggtitle("Figure 3. Log Price for room types")+
#   xlab("")+
#   theme_minimal()+
#   theme(legend.position = "none", plot.title = element_text(hjust = 0.4))
#
ggarrange(p1,p2,
labels = c("Figure2.A", "Figure2.B"),
ncol = 1, nrow = 2)
pairwise.wilcox.test(data$price, data$neighbourhood_group)
#pairwise.wilcox.test(data$price, data$room_type)
#pairwise.wilcox.test(data$price, data$cancellation_policy)
p1 <- data %>%
ggplot(aes(x = log_price, color = have_shampoo, fill = have_shampoo))+
geom_density(alpha = 0.4)+
theme_minimal()
p2 <- data %>%
ggplot(aes(x = reorder(neighbourhood_group, -log_price),
y = log_price, fill = have_shampoo))+
geom_boxplot(outlier.size = 0.5)+
xlab("")+
theme_minimal()
ggarrange(p1,p2,
labels = c("Figure3.A", "Figure3.B"),
ncol = 1, nrow = 2)
have_shampoo <- data %>% filter(have_shampoo == 1) %>% pull(log_price)
not_shampoo <- data %>% filter(have_shampoo == 0) %>% pull(log_price)
var.test(have_shampoo, not_shampoo)
t.test(have_shampoo, not_shampoo, var.equal = T,alternative = "greater")
#Equal Variance
t.test(have_shampoo, not_shampoo, var.equal = T,alternative = "greater")
#p-value < 0.05. Listings have shampoo have higher price!
#### Anova to test price difference of whether have shampoo in each neighbourhood group
summary(aov(log_price ~ neighbourhood_group * have_shampoo, data = data))
t.test(have_shampoo, not_shampoo, var.equal = T,alternative = "greater")
summary(aov(log_price ~ neighbourhood_group * have_shampoo, data = data))
###neighbourhood_group###
# % of 5 boroughs
dat2 <- data.table(data)
neighb_count <- dat2[, .N, keyby = neighbourhood_group] %>%
mutate(percent = percent(N / sum(N))) %>%
mutate(label = paste(neighbourhood_group, percent))
#pie(neighb_count$N, neighb_count$label)
# average price in 5 boroughs
price_avg <- dat2 %>% group_by(neighbourhood_group) %>%
summarise(Avg_price = round(mean(price, na.rm = T),2), N = n())
setorderv(price_avg, "Avg_price",order = -1)
#price_avg
#bar plot
barplot(price_avg$Avg_price, names.arg = price_avg$neighbourhood_group, ylim = c(0,200))
text(x = c(0.7,1.9,3.1,4.2,5.5), y = price_avg$Avg_price + 6, labels = paste("$", price_avg$Avg_price))
#hist of price in 5 boroughs
data %>% ggplot(aes(price, color = neighbourhood_group)) + geom_freqpoly()
#boxplot
data %>% ggplot(aes(fct_reorder(neighbourhood_group, -price), price, color = neighbourhood_group)) + geom_boxplot()
#Wilcoxon rank-sum test
kruskal.test(price ~ neighbourhood_group, data)
pairwise.wilcox.test(data$price, data$neighbourhood_group)
###room_type###
# average price by room type
price_type <- dat2 %>% group_by(room_type) %>% summarise(avg_price = round(mean(price, na.rm = T),2))
price_type
barplot(height = price_type$avg_price, names.arg = price_type$room_type)
# average price by room type + boroughs
price_type <- data %>% group_by(neighbourhood_group, room_type) %>% summarise(n=n())
setorderv(price_type, cols = "n", order = -1)
ggplot(price_type, aes(fill=room_type, y=n, x=neighbourhood_group)) +
geom_bar(position="stack", stat="identity")+
xlab("Neighbourhood") + ylab("Counts")
#Wilcoxon rank-sum test
kruskal.test(price ~ room_type, data)
#p-value < 2.2e-16, significant differences in price according to room types
price_type <- data %>% group_by(neighbourhood_group, room_type) %>% summarise(n=n())
setorderv(price_type, cols = "n", order = -1)
ggplot(price_type, aes(fill=room_type, y=n, x=neighbourhood_group)) +
geom_bar(position="stack", stat="identity")+
xlab("Neighbourhood") + ylab("Counts")
price_type <- data %>% group_by(neighbourhood_group, room_type) %>% summarise(n=n())
setorderv(price_type, cols = "n", order = -1)
ggplot(price_type, aes(fill=room_type, y=n, x=neighbourhood_group)) +
geom_bar(position="stack", stat="identity")+
xlab("Neighbourhood") + ylab("Counts") + labs(title = "Figure 1 Geographic Overlook")
qqnorm(log(data$price))
qqnorm(log(data$price))
qqnorm(log(data$price))
shapiro.test(log(data$price))
ks.test(log(data$price), "pnorm")
qqnorm(log(data$price))
###neighbourhood_group###
# % of 5 boroughs
dat2 <- data.table(data)
neighb_count <- dat2[, .N, keyby = neighbourhood_group] %>%
mutate(percent = percent(N / sum(N))) %>%
mutate(label = paste(neighbourhood_group, percent))
#pie(neighb_count$N, neighb_count$label)
# average price in 5 boroughs
price_avg <- dat2 %>% group_by(neighbourhood_group) %>%
summarise(Avg_price = round(mean(price, na.rm = T),2), N = n())
setorderv(price_avg, "Avg_price",order = -1)
#price_avg
#bar plot
barplot(price_avg$Avg_price, names.arg = price_avg$neighbourhood_group, ylim = c(0,200))
text(x = c(0.7,1.9,3.1,4.2,5.5), y = price_avg$Avg_price + 6, labels = paste("$", price_avg$Avg_price))
#hist of price in 5 boroughs
data %>% ggplot(aes(price, color = neighbourhood_group)) + geom_freqpoly()
#boxplot
data %>% ggplot(aes(fct_reorder(neighbourhood_group, -price), price, color = neighbourhood_group)) + geom_boxplot()
#Wilcoxon rank-sum test
kruskal.test(price ~ neighbourhood_group, data)
pairwise.wilcox.test(data$price, data$neighbourhood_group)
###room_type###
# average price by room type
price_type <- dat2 %>% group_by(room_type) %>% summarise(avg_price = round(mean(price, na.rm = T),2))
price_type
barplot(height = price_type$avg_price, names.arg = price_type$room_type)
# average price by room type + boroughs
price_type <- data %>% group_by(neighbourhood_group, room_type) %>% summarise(n=n())
setorderv(price_type, cols = "n", order = -1)
ggplot(price_type, aes(fill=room_type, y=n, x=neighbourhood_group)) +
geom_bar(position="stack", stat="identity")+
xlab("Neighbourhood") + ylab("Counts")
#Wilcoxon rank-sum test
kruskal.test(price ~ room_type, data)
#p-value < 2.2e-16, significant differences in price according to room types
#Wilcoxon rank-sum test
kruskal.test(price ~ room_type, data)
###hosted_years###
#avg hosted years for five boros
#any relationship between hosted years and avg price
data %>% group_by(neighbourhood_group) %>% summarise(avg_hosted_years = mean(hosted_years,na.rm = T),avg_price = mean(price)) %>% arrange(desc(avg_price))
#neighbourhood
#assume same shape, only differ in location
data %>% ggplot(aes(price, color = neighbourhood_group)) + geom_freqpoly()
kruskal.test(price ~ neighbourhood_group, data)
#with no surprise, the price in at least one borough is different from others
wilcox.test(data[data$neighbourhood_group == 'Staten Island',]$price, data[data$neighbourhood_group == 'Queens',]$price)
#p-value = 0.3391, no significant difference of prices in Staten Island and queens
#two sample test
t.test(data[data$neighbourhood_group == 'Staten Island',]$price,data[data$neighbourhood_group == 'Queens',]$price)
#p-value = 0.9255, no significant difference of prices in Staten Island and queens
#room_type in Manhattan
#assume shape of dist same
data[data$neighbourhood_group == "Manhattan",] %>% ggplot(aes(price, color = room_type)) + geom_freqpoly()
kruskal.test(price~room_type, data = data[data$neighbourhood_group == "Manhattan",])
#p-value < 2.2e-16, significant difference of prices among room type in Manhattan
summary(aov(price~room_type,data[data$neighbourhood_group == "Manhattan",]))
#p-value small, significant difference of prices among room type in Manhattan
Box.test(aov(price~room_type,data[data$neighbourhood_group == "Manhattan",])$residuals)
#error variance is not constant
dwtest(aov(price~room_type,data[data$neighbourhood_group == "Manhattan",]))
??dwtest
#load("../data/orig_data.RData")
load("../data/cleaned_data.RData")
library(tidyverse)
library(MASS)
library(scales)
library(data.table)
library(rsample)
library(randomForest)
library(glmnet)
library(ranger)
library(gbm)
library(xgboost)
library(caret)
library(lime)
library(vtreat)
library(modelr)
library(broom)
library(tidyr)
library(tidymodels)
library(ggpubr)
